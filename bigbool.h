#ifndef BIG_BOOL_H
#define BIG_BOOL_H

#include <stdio.h>
#include <stddef.h>
#include <inttypes.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <malloc.h>
#include <time.h>

extern int errno;


#define ERR_OK 0
#define ERR_MEM 1
#define ERR_ARG 2 
#define ERR_WRT 3

typedef struct bigbool
{
    uint8_t* parts;
    size_t last_byte;
    size_t last_bit;
} bigbool;



//Считает длину вектора в битах
//Если функция вернула -1, то vec == 0,
//Иначе возвращает длину вектора.

size_t len_vector(bigbool* vec);

//Создает пустой вектор и зануляет его
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//ERR_MEM - невозможно выделить память

bigbool* empty_bool(size_t len);

//Преобразует строку в вектор
//Возвращает указатель на вектор, преобразованный из строки
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память
//3. ERR_WRT - некорректно введен вектор

bigbool* BB_from_string(char* str);

//Создает строку из вектора
//Возвращает указатель на строку, преобразованную из типа bigbool
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память

char* BB_to_str(bigbool* vec);

//Преобразует 64-битное число в вектор
//Возвращает указатель на вектор, преобразованный из типа uint64_t
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//ERR_MEM - невозможно выделить память

bigbool* BB_from_uint64(uint64_t num);

//Делает инверсию вектора
//Возвращает указатель на инвертированный вектор
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память 

bigbool* BB_not(bigbool* vec);

//Делает ксор двух векторов
//Возвращает указатель на вектор, получившийся в результате операции
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память

bigbool* BB_xor(bigbool* vec1, bigbool* vec2);

//Делает дизъюнкцию двух векторов
//Возвращает указатель на вектор, получившийся в результате операции
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память

bigbool* BB_or(bigbool* vec1, bigbool* vec2);

//Делает конъюнкцию двух векторов
//Возвращает указатель на вектор, получившийся в результате операции
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память

bigbool* BB_and(bigbool* vec1, bigbool* vec2);

//Сдвигает вектор влево (делая его больше)
//Возвращает указатель на вектор, получившийся в результате операции
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память
//Если функция вернула vec, то num == 0
//Если функция вернула BB_right_shift(vec, num), то num < 0

bigbool* BB_left_shift(bigbool* vec, int num);

//Сдвигает вектор вправо (делая его меньше)
//Возвращает указатель на вектор, получившийся в результате операции
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//1. ERR_ARG - передан нулевой вектор
//2. ERR_MEM - невозможно выделить память
//Если функция вернула vec, то num == 0
//Если функция вернула BB_left_shift(vec, num), то num < 0
//Если функция вернула vec, то num >= len_vector(vec)

bigbool* BB_right_shift(bigbool* vec, int num);

//Циклически сдвигает вектор влево (получаемый вектор остаётся той же длины, что и передаваемый) 
//Возвращает указатель на вектор, получившийся в результате операции
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//ERR_ARG - передан нулевой вектор
//ERR_MEM - невозможно выделить память
//Если функция вернула vec, то num == 0
//Если функция вернула BB_right__circle_shift(vec, num), то num < 0

bigbool* BB_left_circle_shift(bigbool* vec, int num);

//Циклически сдвигает вектор вправо (получаемый вектор остаётся той же длины, что и передаваемый) 
//Возвращает указатель на вектор, получившийся в результате операции
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//ERR_ARG - передан нулевой вектор
//ERR_MEM - невозможно выделить память
//Если функция вернула vec, то num == 0
//Если функция вернула BB_left_circle_shift(vec, num), то num < 0

bigbool* BB_right_circle_shift(bigbool* vec, int num);

//Очищает память выделенную на куче для вектора
//Если функция вернула NULL, то переменная errno указывает на ошибку:
//ERR_ARG - передан нулевой указатель

void BB_free(bigbool* vec);

#endif